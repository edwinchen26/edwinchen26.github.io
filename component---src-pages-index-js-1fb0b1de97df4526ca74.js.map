{"version":3,"sources":["webpack:///./src/components/landingPage.js","webpack:///./src/components/seo.js","webpack:///./src/components/post.js","webpack:///./src/pages/index.js"],"names":["LandingPage","react_default","a","createElement","className","class","SEO","_ref","description","lang","meta","keywords","title","gatsby_browser_entry","query","detailsQuery","render","data","metaDescription","site","siteMetadata","Helmet_default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_1025518380","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired","Post","date","cover","gatsby_image_default","fluid","style","position","left","top","width","height","zIndex","__webpack_require__","d","__webpack_exports__","listQuery","IndexPage","props","postList","allMarkdownRemark","seo","components_landingPage","edges","map","i","node","to","fields","slug","components_post","frontmatter","image","childImageSharp"],"mappings":"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","file":"component---src-pages-index-js-1fb0b1de97df4526ca74.js","sourcesContent":["import React from 'react'\r\nimport './landingPage.css'\r\n\r\nconst LandingPage = () => (\r\n  <div className=\"profile\">\r\n    <div className=\"information\">\r\n        <div className=\"social_media\">\r\n          <i className=\"fab fa-twitter\"></i>\r\n          <i className=\"fab fa-instagram\"></i>\r\n          <i className=\"fab fa-codepen\"></i>\r\n        </div>\r\n        <h2>Edwin Chen</h2>\r\n        <p>Lead rapper for girl group TWICE. Experienced master of ceremony. Eagle eyesight. </p>\r\n        <span className=\"location\">Currently living in <i class=\"fas fa-map-marker-alt\"></i> Gyeonggi-do, South Korea</span>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default LandingPage\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nfunction SEO({ description, lang, meta, keywords, title }) {\r\n  return (\r\n    <StaticQuery\r\n      query={detailsQuery}\r\n      render={data => {\r\n        const metaDescription =\r\n          description || data.site.siteMetadata.description\r\n        return (\r\n          <Helmet\r\n            htmlAttributes={{\r\n              lang,\r\n            }}\r\n            title={title}\r\n            titleTemplate={`%s Â· ${data.site.siteMetadata.title}`}\r\n            meta={[\r\n              {\r\n                name: `description`,\r\n                content: metaDescription,\r\n              },\r\n              {\r\n                property: `og:title`,\r\n                content: title,\r\n              },\r\n              {\r\n                property: `og:description`,\r\n                content: metaDescription,\r\n              },\r\n              {\r\n                property: `og:type`,\r\n                content: `website`,\r\n              },\r\n              {\r\n                name: `twitter:card`,\r\n                content: `summary`,\r\n              },\r\n              {\r\n                name: `twitter:creator`,\r\n                content: data.site.siteMetadata.author,\r\n              },\r\n              {\r\n                name: `twitter:title`,\r\n                content: title,\r\n              },\r\n              {\r\n                name: `twitter:description`,\r\n                content: metaDescription,\r\n              },\r\n            ]\r\n              .concat(\r\n                keywords.length > 0\r\n                  ? {\r\n                      name: `keywords`,\r\n                      content: keywords.join(`, `),\r\n                    }\r\n                  : []\r\n              )\r\n              .concat(meta)}\r\n          />\r\n        )\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  keywords: [],\r\n  title: `Home`,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.array,\r\n  keywords: PropTypes.arrayOf(PropTypes.string),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n\r\nconst detailsQuery = graphql`\r\n  query DefaultSEOQuery {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        author\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Img from 'gatsby-image';\r\nimport './post.css'\r\n\r\nconst Post = ({ title, date, cover }) => (\r\n  <div className=\"post\">\r\n    <div className=\"picture\">\r\n      <Img fluid={cover} style={{ position: \"absolute\", left: 0, top: 0, width: \"100%\", height: \"100%\", zIndex: -100 }}/>\r\n    </div>\r\n    <h4>{title}</h4>\r\n    <span className=\"date\">{date}</span>\r\n  </div>\r\n  )\r\n  Post.propTypes = {\r\n    title: PropTypes.string,\r\n    date: PropTypes.string,\r\n    cover: PropTypes.string,\r\n  }\r\n  \r\n  export default Post","import React from 'react'\r\nimport { Link, graphql } from 'gatsby'\r\nimport LandingPage from '../components/landingPage'\r\nimport SEO from '../components/seo'\r\nimport Post from '../components/post'\r\nimport './index.css'\r\n\r\nconst IndexPage = (props) => {\r\n  const postList = props.data.allMarkdownRemark;\r\n  return(\r\n\r\n    <div className=\"container\">\r\n      <SEO />\r\n      <LandingPage />\r\n\r\n      <div className=\"posts\">\r\n        <h3>Posts</h3>\r\n        <div className=\"content\">\r\n          {postList.edges.map(({node}, i) => (\r\n              <Link to={node.fields.slug} className=\"link\">\r\n                <Post title={node.frontmatter.title} date={node.frontmatter.date} cover={node.frontmatter.image.childImageSharp.fluid} />\r\n              </Link>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default IndexPage\r\n\r\nexport const listQuery = graphql`\r\n  query ListQuery {\r\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\r\n      edges {\r\n        node {\r\n          fields{\r\n            slug\r\n          }\r\n          excerpt(pruneLength: 250)\r\n          frontmatter {\r\n            date(formatString: \"MMMM D, YYYY\")\r\n            title\r\n            image {\r\n              childImageSharp {\r\n                resize(width: 1500, height: 1500) {\r\n                  src\r\n                }\r\n                fluid(maxWidth: 786) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n           }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}